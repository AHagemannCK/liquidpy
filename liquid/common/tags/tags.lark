// expr too broad for output? maybe atom?
output: expr ("|" expr_filter)*

expr_filter: filter [":" filter_args]

filter: VAR
filter_args: expr ("," expr)*

// liquid does not have a good support precedence of and / or
// if we have more than 3 operators
// however, with 3 operators, and has higher precedence
// see https://shopify.github.io/liquid/basics/operators/#order-of-operations

?expr: expr_nological (/and|or/ expr_nological)+ -> logical
    | expr_nological
    | "(" expr ")"

// we have to use earley to make this priority work
// liquid does not support parentheses, here we just add in case
?expr_nological: op_comparison
    | contains
    | atom

op_comparison: atom OP atom
    | "(" op_comparison ")"
!contains: atom "contains" atom
    | "(" contains ")"

?atom: "(" (int|var) ".." (int|var) ")" -> range
    | number | string
    | "nil"   -> nil
    | "true"  -> true
    | "false" -> false
    | atom "[" atom "]"    -> getitem
    | atom "." ATTRNAME    -> getattr
    | var
    | "(" atom ")"

var: VAR

int: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER
number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER
string: STRING

// note the order here
OP: "<>"|"=="|">="|"<="|"!="|"<"|">"
STRING: (ESCAPED_STRING | "'" _STRING_ESC_INNER "'")
// earley does support terminal priorities
ATTRNAME: /[A-Za-z_][\w_\-]*/
DEC_NUMBER: /[-+]?(0|[1-9]\d*)/i
HEX_NUMBER: /[-+]?0x[\da-f]*/i
OCT_NUMBER: /[-+]?0o[0-7]*/i
BIN_NUMBER : /[-+]?0b[0-1]*/i
FLOAT_NUMBER: /[-+]?((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

%import common.CNAME -> VAR
%import common (ESCAPED_STRING, _STRING_ESC_INNER, WS_INLINE)
